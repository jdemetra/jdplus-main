// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: x13.proto
// Protobuf Java Version: 4.30.2

package jdplus.x13.base.protobuf;

/**
 * Protobuf type {@code x13.X11Spec}
 */
public final class X11Spec extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:x13.X11Spec)
    X11SpecOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 30,
      /* patch= */ 2,
      /* suffix= */ "",
      X11Spec.class.getName());
  }
  // Use X11Spec.newBuilder() to construct.
  private X11Spec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private X11Spec() {
    mode_ = 0;
    sfilters_ = emptyIntList();
    sigma_ = 0;
    vsigmas_ = emptyIntList();
    bias_ = 0;
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return jdplus.x13.base.protobuf.X13Protos.internal_static_x13_X11Spec_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return jdplus.x13.base.protobuf.X13Protos.internal_static_x13_X11Spec_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            jdplus.x13.base.protobuf.X11Spec.class, jdplus.x13.base.protobuf.X11Spec.Builder.class);
  }

  public static final int MODE_FIELD_NUMBER = 1;
  private int mode_ = 0;
  /**
   * <code>.x13.DecompositionMode mode = 1;</code>
   * @return The enum numeric value on the wire for mode.
   */
  @java.lang.Override public int getModeValue() {
    return mode_;
  }
  /**
   * <code>.x13.DecompositionMode mode = 1;</code>
   * @return The mode.
   */
  @java.lang.Override public jdplus.x13.base.protobuf.DecompositionMode getMode() {
    jdplus.x13.base.protobuf.DecompositionMode result = jdplus.x13.base.protobuf.DecompositionMode.forNumber(mode_);
    return result == null ? jdplus.x13.base.protobuf.DecompositionMode.UNRECOGNIZED : result;
  }

  public static final int SEASONAL_FIELD_NUMBER = 2;
  private boolean seasonal_ = false;
  /**
   * <code>bool seasonal = 2;</code>
   * @return The seasonal.
   */
  @java.lang.Override
  public boolean getSeasonal() {
    return seasonal_;
  }

  public static final int HENDERSON_FIELD_NUMBER = 3;
  private int henderson_ = 0;
  /**
   * <code>int32 henderson = 3;</code>
   * @return The henderson.
   */
  @java.lang.Override
  public int getHenderson() {
    return henderson_;
  }

  public static final int SFILTERS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList sfilters_;
  private static final com.google.protobuf.Internal.IntListAdapter.IntConverter<
      jdplus.x13.base.protobuf.SeasonalFilter> sfilters_converter_ =
          new com.google.protobuf.Internal.IntListAdapter.IntConverter<
              jdplus.x13.base.protobuf.SeasonalFilter>() {
            public jdplus.x13.base.protobuf.SeasonalFilter convert(int from) {
              jdplus.x13.base.protobuf.SeasonalFilter result = jdplus.x13.base.protobuf.SeasonalFilter.forNumber(from);
              return result == null ? jdplus.x13.base.protobuf.SeasonalFilter.UNRECOGNIZED : result;
            }
          };
  /**
   * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
   * @return A list containing the sfilters.
   */
  @java.lang.Override
  public java.util.List<jdplus.x13.base.protobuf.SeasonalFilter> getSfiltersList() {
    return new com.google.protobuf.Internal.IntListAdapter<
        jdplus.x13.base.protobuf.SeasonalFilter>(sfilters_, sfilters_converter_);
  }
  /**
   * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
   * @return The count of sfilters.
   */
  @java.lang.Override
  public int getSfiltersCount() {
    return sfilters_.size();
  }
  /**
   * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
   * @param index The index of the element to return.
   * @return The sfilters at the given index.
   */
  @java.lang.Override
  public jdplus.x13.base.protobuf.SeasonalFilter getSfilters(int index) {
    return sfilters_converter_.convert(sfilters_.getInt(index));
  }
  /**
   * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
   * @return A list containing the enum numeric values on the wire for sfilters.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getSfiltersValueList() {
    return sfilters_;
  }
  /**
   * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of sfilters at the given index.
   */
  @java.lang.Override
  public int getSfiltersValue(int index) {
    return sfilters_.getInt(index);
  }
  private int sfiltersMemoizedSerializedSize;

  public static final int LSIG_FIELD_NUMBER = 5;
  private double lsig_ = 0D;
  /**
   * <code>double lsig = 5;</code>
   * @return The lsig.
   */
  @java.lang.Override
  public double getLsig() {
    return lsig_;
  }

  public static final int USIG_FIELD_NUMBER = 6;
  private double usig_ = 0D;
  /**
   * <code>double usig = 6;</code>
   * @return The usig.
   */
  @java.lang.Override
  public double getUsig() {
    return usig_;
  }

  public static final int NFCASTS_FIELD_NUMBER = 7;
  private int nfcasts_ = 0;
  /**
   * <code>int32 nfcasts = 7;</code>
   * @return The nfcasts.
   */
  @java.lang.Override
  public int getNfcasts() {
    return nfcasts_;
  }

  public static final int NBCASTS_FIELD_NUMBER = 8;
  private int nbcasts_ = 0;
  /**
   * <code>int32 nbcasts = 8;</code>
   * @return The nbcasts.
   */
  @java.lang.Override
  public int getNbcasts() {
    return nbcasts_;
  }

  public static final int SIGMA_FIELD_NUMBER = 9;
  private int sigma_ = 0;
  /**
   * <code>.x13.CalendarSigma sigma = 9;</code>
   * @return The enum numeric value on the wire for sigma.
   */
  @java.lang.Override public int getSigmaValue() {
    return sigma_;
  }
  /**
   * <code>.x13.CalendarSigma sigma = 9;</code>
   * @return The sigma.
   */
  @java.lang.Override public jdplus.x13.base.protobuf.CalendarSigma getSigma() {
    jdplus.x13.base.protobuf.CalendarSigma result = jdplus.x13.base.protobuf.CalendarSigma.forNumber(sigma_);
    return result == null ? jdplus.x13.base.protobuf.CalendarSigma.UNRECOGNIZED : result;
  }

  public static final int VSIGMAS_FIELD_NUMBER = 10;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.IntList vsigmas_ =
      emptyIntList();
  /**
   * <code>repeated int32 vsigmas = 10;</code>
   * @return A list containing the vsigmas.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getVsigmasList() {
    return vsigmas_;
  }
  /**
   * <code>repeated int32 vsigmas = 10;</code>
   * @return The count of vsigmas.
   */
  public int getVsigmasCount() {
    return vsigmas_.size();
  }
  /**
   * <code>repeated int32 vsigmas = 10;</code>
   * @param index The index of the element to return.
   * @return The vsigmas at the given index.
   */
  public int getVsigmas(int index) {
    return vsigmas_.getInt(index);
  }
  private int vsigmasMemoizedSerializedSize = -1;

  public static final int EXCLUDE_FCASTS_FIELD_NUMBER = 11;
  private boolean excludeFcasts_ = false;
  /**
   * <code>bool exclude_fcasts = 11;</code>
   * @return The excludeFcasts.
   */
  @java.lang.Override
  public boolean getExcludeFcasts() {
    return excludeFcasts_;
  }

  public static final int BIAS_FIELD_NUMBER = 12;
  private int bias_ = 0;
  /**
   * <code>.x13.BiasCorrection bias = 12;</code>
   * @return The enum numeric value on the wire for bias.
   */
  @java.lang.Override public int getBiasValue() {
    return bias_;
  }
  /**
   * <code>.x13.BiasCorrection bias = 12;</code>
   * @return The bias.
   */
  @java.lang.Override public jdplus.x13.base.protobuf.BiasCorrection getBias() {
    jdplus.x13.base.protobuf.BiasCorrection result = jdplus.x13.base.protobuf.BiasCorrection.forNumber(bias_);
    return result == null ? jdplus.x13.base.protobuf.BiasCorrection.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (mode_ != jdplus.x13.base.protobuf.DecompositionMode.MODE_UNKNOWN.getNumber()) {
      output.writeEnum(1, mode_);
    }
    if (seasonal_ != false) {
      output.writeBool(2, seasonal_);
    }
    if (henderson_ != 0) {
      output.writeInt32(3, henderson_);
    }
    if (getSfiltersList().size() > 0) {
      output.writeUInt32NoTag(34);
      output.writeUInt32NoTag(sfiltersMemoizedSerializedSize);
    }
    for (int i = 0; i < sfilters_.size(); i++) {
      output.writeEnumNoTag(sfilters_.getInt(i));
    }
    if (java.lang.Double.doubleToRawLongBits(lsig_) != 0) {
      output.writeDouble(5, lsig_);
    }
    if (java.lang.Double.doubleToRawLongBits(usig_) != 0) {
      output.writeDouble(6, usig_);
    }
    if (nfcasts_ != 0) {
      output.writeInt32(7, nfcasts_);
    }
    if (nbcasts_ != 0) {
      output.writeInt32(8, nbcasts_);
    }
    if (sigma_ != jdplus.x13.base.protobuf.CalendarSigma.SIGMA_NONE.getNumber()) {
      output.writeEnum(9, sigma_);
    }
    if (getVsigmasList().size() > 0) {
      output.writeUInt32NoTag(82);
      output.writeUInt32NoTag(vsigmasMemoizedSerializedSize);
    }
    for (int i = 0; i < vsigmas_.size(); i++) {
      output.writeInt32NoTag(vsigmas_.getInt(i));
    }
    if (excludeFcasts_ != false) {
      output.writeBool(11, excludeFcasts_);
    }
    if (bias_ != jdplus.x13.base.protobuf.BiasCorrection.BIAS_NONE.getNumber()) {
      output.writeEnum(12, bias_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (mode_ != jdplus.x13.base.protobuf.DecompositionMode.MODE_UNKNOWN.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, mode_);
    }
    if (seasonal_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, seasonal_);
    }
    if (henderson_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, henderson_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < sfilters_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(sfilters_.getInt(i));
      }
      size += dataSize;
      if (!getSfiltersList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }sfiltersMemoizedSerializedSize = dataSize;
    }
    if (java.lang.Double.doubleToRawLongBits(lsig_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(5, lsig_);
    }
    if (java.lang.Double.doubleToRawLongBits(usig_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(6, usig_);
    }
    if (nfcasts_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, nfcasts_);
    }
    if (nbcasts_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, nbcasts_);
    }
    if (sigma_ != jdplus.x13.base.protobuf.CalendarSigma.SIGMA_NONE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, sigma_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < vsigmas_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(vsigmas_.getInt(i));
      }
      size += dataSize;
      if (!getVsigmasList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      vsigmasMemoizedSerializedSize = dataSize;
    }
    if (excludeFcasts_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(11, excludeFcasts_);
    }
    if (bias_ != jdplus.x13.base.protobuf.BiasCorrection.BIAS_NONE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(12, bias_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof jdplus.x13.base.protobuf.X11Spec)) {
      return super.equals(obj);
    }
    jdplus.x13.base.protobuf.X11Spec other = (jdplus.x13.base.protobuf.X11Spec) obj;

    if (mode_ != other.mode_) return false;
    if (getSeasonal()
        != other.getSeasonal()) return false;
    if (getHenderson()
        != other.getHenderson()) return false;
    if (!sfilters_.equals(other.sfilters_)) return false;
    if (java.lang.Double.doubleToLongBits(getLsig())
        != java.lang.Double.doubleToLongBits(
            other.getLsig())) return false;
    if (java.lang.Double.doubleToLongBits(getUsig())
        != java.lang.Double.doubleToLongBits(
            other.getUsig())) return false;
    if (getNfcasts()
        != other.getNfcasts()) return false;
    if (getNbcasts()
        != other.getNbcasts()) return false;
    if (sigma_ != other.sigma_) return false;
    if (!getVsigmasList()
        .equals(other.getVsigmasList())) return false;
    if (getExcludeFcasts()
        != other.getExcludeFcasts()) return false;
    if (bias_ != other.bias_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + mode_;
    hash = (37 * hash) + SEASONAL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getSeasonal());
    hash = (37 * hash) + HENDERSON_FIELD_NUMBER;
    hash = (53 * hash) + getHenderson();
    if (getSfiltersCount() > 0) {
      hash = (37 * hash) + SFILTERS_FIELD_NUMBER;
      hash = (53 * hash) + sfilters_.hashCode();
    }
    hash = (37 * hash) + LSIG_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getLsig()));
    hash = (37 * hash) + USIG_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getUsig()));
    hash = (37 * hash) + NFCASTS_FIELD_NUMBER;
    hash = (53 * hash) + getNfcasts();
    hash = (37 * hash) + NBCASTS_FIELD_NUMBER;
    hash = (53 * hash) + getNbcasts();
    hash = (37 * hash) + SIGMA_FIELD_NUMBER;
    hash = (53 * hash) + sigma_;
    if (getVsigmasCount() > 0) {
      hash = (37 * hash) + VSIGMAS_FIELD_NUMBER;
      hash = (53 * hash) + getVsigmasList().hashCode();
    }
    hash = (37 * hash) + EXCLUDE_FCASTS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getExcludeFcasts());
    hash = (37 * hash) + BIAS_FIELD_NUMBER;
    hash = (53 * hash) + bias_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static jdplus.x13.base.protobuf.X11Spec parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static jdplus.x13.base.protobuf.X11Spec parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static jdplus.x13.base.protobuf.X11Spec parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static jdplus.x13.base.protobuf.X11Spec parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static jdplus.x13.base.protobuf.X11Spec parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static jdplus.x13.base.protobuf.X11Spec parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static jdplus.x13.base.protobuf.X11Spec parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static jdplus.x13.base.protobuf.X11Spec parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static jdplus.x13.base.protobuf.X11Spec parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static jdplus.x13.base.protobuf.X11Spec parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static jdplus.x13.base.protobuf.X11Spec parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static jdplus.x13.base.protobuf.X11Spec parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(jdplus.x13.base.protobuf.X11Spec prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code x13.X11Spec}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:x13.X11Spec)
      jdplus.x13.base.protobuf.X11SpecOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return jdplus.x13.base.protobuf.X13Protos.internal_static_x13_X11Spec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return jdplus.x13.base.protobuf.X13Protos.internal_static_x13_X11Spec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              jdplus.x13.base.protobuf.X11Spec.class, jdplus.x13.base.protobuf.X11Spec.Builder.class);
    }

    // Construct using jdplus.x13.base.protobuf.X11Spec.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      mode_ = 0;
      seasonal_ = false;
      henderson_ = 0;
      sfilters_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000008);
      lsig_ = 0D;
      usig_ = 0D;
      nfcasts_ = 0;
      nbcasts_ = 0;
      sigma_ = 0;
      vsigmas_ = emptyIntList();
      excludeFcasts_ = false;
      bias_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return jdplus.x13.base.protobuf.X13Protos.internal_static_x13_X11Spec_descriptor;
    }

    @java.lang.Override
    public jdplus.x13.base.protobuf.X11Spec getDefaultInstanceForType() {
      return jdplus.x13.base.protobuf.X11Spec.getDefaultInstance();
    }

    @java.lang.Override
    public jdplus.x13.base.protobuf.X11Spec build() {
      jdplus.x13.base.protobuf.X11Spec result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public jdplus.x13.base.protobuf.X11Spec buildPartial() {
      jdplus.x13.base.protobuf.X11Spec result = new jdplus.x13.base.protobuf.X11Spec(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(jdplus.x13.base.protobuf.X11Spec result) {
      if (((bitField0_ & 0x00000008) != 0)) {
        sfilters_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.sfilters_ = sfilters_;
    }

    private void buildPartial0(jdplus.x13.base.protobuf.X11Spec result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.mode_ = mode_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.seasonal_ = seasonal_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.henderson_ = henderson_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.lsig_ = lsig_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.usig_ = usig_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.nfcasts_ = nfcasts_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.nbcasts_ = nbcasts_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.sigma_ = sigma_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        vsigmas_.makeImmutable();
        result.vsigmas_ = vsigmas_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.excludeFcasts_ = excludeFcasts_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.bias_ = bias_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof jdplus.x13.base.protobuf.X11Spec) {
        return mergeFrom((jdplus.x13.base.protobuf.X11Spec)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(jdplus.x13.base.protobuf.X11Spec other) {
      if (other == jdplus.x13.base.protobuf.X11Spec.getDefaultInstance()) return this;
      if (other.mode_ != 0) {
        setModeValue(other.getModeValue());
      }
      if (other.getSeasonal() != false) {
        setSeasonal(other.getSeasonal());
      }
      if (other.getHenderson() != 0) {
        setHenderson(other.getHenderson());
      }
      if (!other.sfilters_.isEmpty()) {
        if (sfilters_.isEmpty()) {
          sfilters_ = other.sfilters_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureSfiltersIsMutable();
          sfilters_.addAll(other.sfilters_);
        }
        onChanged();
      }
      if (java.lang.Double.doubleToRawLongBits(other.getLsig()) != 0) {
        setLsig(other.getLsig());
      }
      if (java.lang.Double.doubleToRawLongBits(other.getUsig()) != 0) {
        setUsig(other.getUsig());
      }
      if (other.getNfcasts() != 0) {
        setNfcasts(other.getNfcasts());
      }
      if (other.getNbcasts() != 0) {
        setNbcasts(other.getNbcasts());
      }
      if (other.sigma_ != 0) {
        setSigmaValue(other.getSigmaValue());
      }
      if (!other.vsigmas_.isEmpty()) {
        if (vsigmas_.isEmpty()) {
          vsigmas_ = other.vsigmas_;
          vsigmas_.makeImmutable();
          bitField0_ |= 0x00000200;
        } else {
          ensureVsigmasIsMutable();
          vsigmas_.addAll(other.vsigmas_);
        }
        onChanged();
      }
      if (other.getExcludeFcasts() != false) {
        setExcludeFcasts(other.getExcludeFcasts());
      }
      if (other.bias_ != 0) {
        setBiasValue(other.getBiasValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              mode_ = input.readEnum();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              seasonal_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              henderson_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              int tmpRaw = input.readEnum();
              ensureSfiltersIsMutable();
              sfilters_.addInt(tmpRaw);
              break;
            } // case 32
            case 34: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int tmpRaw = input.readEnum();
                ensureSfiltersIsMutable();
                sfilters_.addInt(tmpRaw);
              }
              input.popLimit(oldLimit);
              break;
            } // case 34
            case 41: {
              lsig_ = input.readDouble();
              bitField0_ |= 0x00000010;
              break;
            } // case 41
            case 49: {
              usig_ = input.readDouble();
              bitField0_ |= 0x00000020;
              break;
            } // case 49
            case 56: {
              nfcasts_ = input.readInt32();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 64: {
              nbcasts_ = input.readInt32();
              bitField0_ |= 0x00000080;
              break;
            } // case 64
            case 72: {
              sigma_ = input.readEnum();
              bitField0_ |= 0x00000100;
              break;
            } // case 72
            case 80: {
              int v = input.readInt32();
              ensureVsigmasIsMutable();
              vsigmas_.addInt(v);
              break;
            } // case 80
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureVsigmasIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                vsigmas_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 82
            case 88: {
              excludeFcasts_ = input.readBool();
              bitField0_ |= 0x00000400;
              break;
            } // case 88
            case 96: {
              bias_ = input.readEnum();
              bitField0_ |= 0x00000800;
              break;
            } // case 96
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int mode_ = 0;
    /**
     * <code>.x13.DecompositionMode mode = 1;</code>
     * @return The enum numeric value on the wire for mode.
     */
    @java.lang.Override public int getModeValue() {
      return mode_;
    }
    /**
     * <code>.x13.DecompositionMode mode = 1;</code>
     * @param value The enum numeric value on the wire for mode to set.
     * @return This builder for chaining.
     */
    public Builder setModeValue(int value) {
      mode_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.x13.DecompositionMode mode = 1;</code>
     * @return The mode.
     */
    @java.lang.Override
    public jdplus.x13.base.protobuf.DecompositionMode getMode() {
      jdplus.x13.base.protobuf.DecompositionMode result = jdplus.x13.base.protobuf.DecompositionMode.forNumber(mode_);
      return result == null ? jdplus.x13.base.protobuf.DecompositionMode.UNRECOGNIZED : result;
    }
    /**
     * <code>.x13.DecompositionMode mode = 1;</code>
     * @param value The mode to set.
     * @return This builder for chaining.
     */
    public Builder setMode(jdplus.x13.base.protobuf.DecompositionMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      mode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.x13.DecompositionMode mode = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearMode() {
      bitField0_ = (bitField0_ & ~0x00000001);
      mode_ = 0;
      onChanged();
      return this;
    }

    private boolean seasonal_ ;
    /**
     * <code>bool seasonal = 2;</code>
     * @return The seasonal.
     */
    @java.lang.Override
    public boolean getSeasonal() {
      return seasonal_;
    }
    /**
     * <code>bool seasonal = 2;</code>
     * @param value The seasonal to set.
     * @return This builder for chaining.
     */
    public Builder setSeasonal(boolean value) {

      seasonal_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>bool seasonal = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearSeasonal() {
      bitField0_ = (bitField0_ & ~0x00000002);
      seasonal_ = false;
      onChanged();
      return this;
    }

    private int henderson_ ;
    /**
     * <code>int32 henderson = 3;</code>
     * @return The henderson.
     */
    @java.lang.Override
    public int getHenderson() {
      return henderson_;
    }
    /**
     * <code>int32 henderson = 3;</code>
     * @param value The henderson to set.
     * @return This builder for chaining.
     */
    public Builder setHenderson(int value) {

      henderson_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>int32 henderson = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearHenderson() {
      bitField0_ = (bitField0_ & ~0x00000004);
      henderson_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList sfilters_ =
      emptyIntList();
    private void ensureSfiltersIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        sfilters_ = makeMutableCopy(sfilters_);
        bitField0_ |= 0x00000008;
      }
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @return A list containing the sfilters.
     */
    public java.util.List<jdplus.x13.base.protobuf.SeasonalFilter> getSfiltersList() {
      return new com.google.protobuf.Internal.IntListAdapter<
          jdplus.x13.base.protobuf.SeasonalFilter>(sfilters_, sfilters_converter_);
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @return The count of sfilters.
     */
    public int getSfiltersCount() {
      return sfilters_.size();
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @param index The index of the element to return.
     * @return The sfilters at the given index.
     */
    public jdplus.x13.base.protobuf.SeasonalFilter getSfilters(int index) {
      return sfilters_converter_.convert(sfilters_.getInt(index));
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @param index The index to set the value at.
     * @param value The sfilters to set.
     * @return This builder for chaining.
     */
    public Builder setSfilters(
        int index, jdplus.x13.base.protobuf.SeasonalFilter value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSfiltersIsMutable();
      sfilters_.setInt(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @param value The sfilters to add.
     * @return This builder for chaining.
     */
    public Builder addSfilters(jdplus.x13.base.protobuf.SeasonalFilter value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSfiltersIsMutable();
      sfilters_.addInt(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @param values The sfilters to add.
     * @return This builder for chaining.
     */
    public Builder addAllSfilters(
        java.lang.Iterable<? extends jdplus.x13.base.protobuf.SeasonalFilter> values) {
      ensureSfiltersIsMutable();
      for (jdplus.x13.base.protobuf.SeasonalFilter value : values) {
        sfilters_.addInt(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearSfilters() {
      sfilters_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @return A list containing the enum numeric values on the wire for sfilters.
     */
    public java.util.List<java.lang.Integer>
    getSfiltersValueList() {
      return java.util.Collections.unmodifiableList(sfilters_);
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of sfilters at the given index.
     */
    public int getSfiltersValue(int index) {
      return sfilters_.getInt(index);
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for sfilters to set.
     * @return This builder for chaining.
     */
    public Builder setSfiltersValue(
        int index, int value) {
      ensureSfiltersIsMutable();
      sfilters_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @param value The enum numeric value on the wire for sfilters to add.
     * @return This builder for chaining.
     */
    public Builder addSfiltersValue(int value) {
      ensureSfiltersIsMutable();
      sfilters_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .x13.SeasonalFilter sfilters = 4;</code>
     * @param values The enum numeric values on the wire for sfilters to add.
     * @return This builder for chaining.
     */
    public Builder addAllSfiltersValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureSfiltersIsMutable();
      for (int value : values) {
        sfilters_.addInt(value);
      }
      onChanged();
      return this;
    }

    private double lsig_ ;
    /**
     * <code>double lsig = 5;</code>
     * @return The lsig.
     */
    @java.lang.Override
    public double getLsig() {
      return lsig_;
    }
    /**
     * <code>double lsig = 5;</code>
     * @param value The lsig to set.
     * @return This builder for chaining.
     */
    public Builder setLsig(double value) {

      lsig_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>double lsig = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearLsig() {
      bitField0_ = (bitField0_ & ~0x00000010);
      lsig_ = 0D;
      onChanged();
      return this;
    }

    private double usig_ ;
    /**
     * <code>double usig = 6;</code>
     * @return The usig.
     */
    @java.lang.Override
    public double getUsig() {
      return usig_;
    }
    /**
     * <code>double usig = 6;</code>
     * @param value The usig to set.
     * @return This builder for chaining.
     */
    public Builder setUsig(double value) {

      usig_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>double usig = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearUsig() {
      bitField0_ = (bitField0_ & ~0x00000020);
      usig_ = 0D;
      onChanged();
      return this;
    }

    private int nfcasts_ ;
    /**
     * <code>int32 nfcasts = 7;</code>
     * @return The nfcasts.
     */
    @java.lang.Override
    public int getNfcasts() {
      return nfcasts_;
    }
    /**
     * <code>int32 nfcasts = 7;</code>
     * @param value The nfcasts to set.
     * @return This builder for chaining.
     */
    public Builder setNfcasts(int value) {

      nfcasts_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <code>int32 nfcasts = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearNfcasts() {
      bitField0_ = (bitField0_ & ~0x00000040);
      nfcasts_ = 0;
      onChanged();
      return this;
    }

    private int nbcasts_ ;
    /**
     * <code>int32 nbcasts = 8;</code>
     * @return The nbcasts.
     */
    @java.lang.Override
    public int getNbcasts() {
      return nbcasts_;
    }
    /**
     * <code>int32 nbcasts = 8;</code>
     * @param value The nbcasts to set.
     * @return This builder for chaining.
     */
    public Builder setNbcasts(int value) {

      nbcasts_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <code>int32 nbcasts = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearNbcasts() {
      bitField0_ = (bitField0_ & ~0x00000080);
      nbcasts_ = 0;
      onChanged();
      return this;
    }

    private int sigma_ = 0;
    /**
     * <code>.x13.CalendarSigma sigma = 9;</code>
     * @return The enum numeric value on the wire for sigma.
     */
    @java.lang.Override public int getSigmaValue() {
      return sigma_;
    }
    /**
     * <code>.x13.CalendarSigma sigma = 9;</code>
     * @param value The enum numeric value on the wire for sigma to set.
     * @return This builder for chaining.
     */
    public Builder setSigmaValue(int value) {
      sigma_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <code>.x13.CalendarSigma sigma = 9;</code>
     * @return The sigma.
     */
    @java.lang.Override
    public jdplus.x13.base.protobuf.CalendarSigma getSigma() {
      jdplus.x13.base.protobuf.CalendarSigma result = jdplus.x13.base.protobuf.CalendarSigma.forNumber(sigma_);
      return result == null ? jdplus.x13.base.protobuf.CalendarSigma.UNRECOGNIZED : result;
    }
    /**
     * <code>.x13.CalendarSigma sigma = 9;</code>
     * @param value The sigma to set.
     * @return This builder for chaining.
     */
    public Builder setSigma(jdplus.x13.base.protobuf.CalendarSigma value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000100;
      sigma_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.x13.CalendarSigma sigma = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearSigma() {
      bitField0_ = (bitField0_ & ~0x00000100);
      sigma_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList vsigmas_ = emptyIntList();
    private void ensureVsigmasIsMutable() {
      if (!vsigmas_.isModifiable()) {
        vsigmas_ = makeMutableCopy(vsigmas_);
      }
      bitField0_ |= 0x00000200;
    }
    /**
     * <code>repeated int32 vsigmas = 10;</code>
     * @return A list containing the vsigmas.
     */
    public java.util.List<java.lang.Integer>
        getVsigmasList() {
      vsigmas_.makeImmutable();
      return vsigmas_;
    }
    /**
     * <code>repeated int32 vsigmas = 10;</code>
     * @return The count of vsigmas.
     */
    public int getVsigmasCount() {
      return vsigmas_.size();
    }
    /**
     * <code>repeated int32 vsigmas = 10;</code>
     * @param index The index of the element to return.
     * @return The vsigmas at the given index.
     */
    public int getVsigmas(int index) {
      return vsigmas_.getInt(index);
    }
    /**
     * <code>repeated int32 vsigmas = 10;</code>
     * @param index The index to set the value at.
     * @param value The vsigmas to set.
     * @return This builder for chaining.
     */
    public Builder setVsigmas(
        int index, int value) {

      ensureVsigmasIsMutable();
      vsigmas_.setInt(index, value);
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 vsigmas = 10;</code>
     * @param value The vsigmas to add.
     * @return This builder for chaining.
     */
    public Builder addVsigmas(int value) {

      ensureVsigmasIsMutable();
      vsigmas_.addInt(value);
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 vsigmas = 10;</code>
     * @param values The vsigmas to add.
     * @return This builder for chaining.
     */
    public Builder addAllVsigmas(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureVsigmasIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, vsigmas_);
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <code>repeated int32 vsigmas = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearVsigmas() {
      vsigmas_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }

    private boolean excludeFcasts_ ;
    /**
     * <code>bool exclude_fcasts = 11;</code>
     * @return The excludeFcasts.
     */
    @java.lang.Override
    public boolean getExcludeFcasts() {
      return excludeFcasts_;
    }
    /**
     * <code>bool exclude_fcasts = 11;</code>
     * @param value The excludeFcasts to set.
     * @return This builder for chaining.
     */
    public Builder setExcludeFcasts(boolean value) {

      excludeFcasts_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <code>bool exclude_fcasts = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearExcludeFcasts() {
      bitField0_ = (bitField0_ & ~0x00000400);
      excludeFcasts_ = false;
      onChanged();
      return this;
    }

    private int bias_ = 0;
    /**
     * <code>.x13.BiasCorrection bias = 12;</code>
     * @return The enum numeric value on the wire for bias.
     */
    @java.lang.Override public int getBiasValue() {
      return bias_;
    }
    /**
     * <code>.x13.BiasCorrection bias = 12;</code>
     * @param value The enum numeric value on the wire for bias to set.
     * @return This builder for chaining.
     */
    public Builder setBiasValue(int value) {
      bias_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <code>.x13.BiasCorrection bias = 12;</code>
     * @return The bias.
     */
    @java.lang.Override
    public jdplus.x13.base.protobuf.BiasCorrection getBias() {
      jdplus.x13.base.protobuf.BiasCorrection result = jdplus.x13.base.protobuf.BiasCorrection.forNumber(bias_);
      return result == null ? jdplus.x13.base.protobuf.BiasCorrection.UNRECOGNIZED : result;
    }
    /**
     * <code>.x13.BiasCorrection bias = 12;</code>
     * @param value The bias to set.
     * @return This builder for chaining.
     */
    public Builder setBias(jdplus.x13.base.protobuf.BiasCorrection value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000800;
      bias_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.x13.BiasCorrection bias = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearBias() {
      bitField0_ = (bitField0_ & ~0x00000800);
      bias_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:x13.X11Spec)
  }

  // @@protoc_insertion_point(class_scope:x13.X11Spec)
  private static final jdplus.x13.base.protobuf.X11Spec DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new jdplus.x13.base.protobuf.X11Spec();
  }

  public static jdplus.x13.base.protobuf.X11Spec getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<X11Spec>
      PARSER = new com.google.protobuf.AbstractParser<X11Spec>() {
    @java.lang.Override
    public X11Spec parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<X11Spec> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<X11Spec> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public jdplus.x13.base.protobuf.X11Spec getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

